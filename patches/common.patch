diff --git a/Common/Log.cpp b/Common/Log.cpp
index b553824..a22d24f 100644
--- a/Common/Log.cpp
+++ b/Common/Log.cpp
@@ -33,6 +33,13 @@ char Log::_logLevel[7] = {'T', 'D', 'I', 'W', 'E', 'F', 'N'};
 #ifdef ESP_OPEN_RTOS
 #endif
 
+#ifdef __linux__
+#include <sys/types.h>
+#include <sys/syscall.h>
+#include <fcntl.h>
+#include <unistd.h>
+#endif
+
 std::string& string_format(std::string& str, const char* fmt, ...) {
     int size = strlen(fmt) * 2 + 50; // Use a rubric appropriate for your code
     va_list ap;
@@ -148,8 +155,24 @@ void Log::log(char level, const char* file, uint32_t lineNbr,
     vsnprintf(logLine, sizeof(logLine) - 1, fmt, args);
     va_end(args);
 #ifdef __linux__
+#ifdef __GLIBC__
     //	::snprintf(_application,sizeof(_application),"%X",(uint32_t)pthread_self());
     pthread_getname_np(pthread_self(), _application, sizeof(_application));
+#else
+    char procfile[128];
+    int fd, n;
+    ::snprintf(procfile, sizeof(procfile), "/proc/self/task/%d/comm", syscall(SYS_gettid));
+    if ((fd = open(procfile, O_RDONLY | O_CLOEXEC)) >= 0) {
+	if ((n = read(fd, _application, sizeof(_application))) > 0) {
+	    _application[n - 1] = '\0';	// remove the trailing newline
+	} else {
+	    ::snprintf(_application, sizeof(_application), "#%d", syscall(SYS_gettid));
+	}
+	close(fd);
+    } else {
+	::snprintf(_application, sizeof(_application), "#%d", syscall(SYS_gettid));
+    }
+#endif
 #endif
 #if defined(ESP32_IDF) || defined(ESP_OPEN_RTOS) || defined(ESP8266_RTOS_SDK)
     extern void* pxCurrentTCB;
diff --git a/Common/RtosQueue.cpp b/Common/RtosQueue.cpp
index 4abb02d..f1d6c07 100644
--- a/Common/RtosQueue.cpp
+++ b/Common/RtosQueue.cpp
@@ -1,4 +1,5 @@
 #include "RtosQueue.h"
+#include <sys/select.h>
 
 RtosQueue::~RtosQueue() {
 
